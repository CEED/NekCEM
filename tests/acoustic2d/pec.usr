c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc(tt,incfhx,incfhy,incfhz,incfex,incfey,incfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real incfhx(lxzfl),incfhy(lxzfl),incfhz(lxzfl)
      real incfex(lxzfl),incfey(lxzfl),incfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'ZCOUSTIC'

      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      complex*16 ci, z_d1,z_d2
      complex*16 z_tmpk1, z_tmpk2
      complex*16 z_tmp  , z_tmp2
      complex*16 z_tmp_kwave1
      complex*16 z_tmp_kwave2
      integer e
      real    tt,energy_err,flag(6)


c..   user defined wavenumber for different DTN directions
      ci  =(0.0,1.0)
      z_kw(1)= 0   ! negative x-direction DTN
      z_kw(2)= 0   ! positive x-direction DTN
      z_kw(3)= 0   ! negative y-direction DTN
      z_kw(4)= 1.5 ! positive y-direction DTN
      z_kw(5)= 0   ! negative z-direction DTN
      z_kw(6)= 0   ! positive z-direction DTN

      call rzero(flag,6)
      flag(4)=1!incident from top
c..   only for the energy test
      kw(3)= real(z_kw(3))
      kw(4)= real(z_kw(4))

c...  assign temporary values of wavenumber kw
      alp0 = 1.0
      z_tmpk1= alp0
      z_tmpk2= cdsqrt(z_kw(4)**2-alp0**2)

C...  define parameters for multilayer
      do e=1,nelt
         z_alpha0(e)= z_tmpk1
         z_beta0 (e)= z_tmpk2
      enddo

C...  box mesh with periodic boundary
      n = npts
      n2= npts*2

      do e= 1,nelt

         z_tmp_kwave1 = z_kw(4)
         z_tmp_kwave2 = z_beta0(e)**2
         do i= 1,nxyz
            j= i+(e-1)*nxyz
            xx= xm1(j,1,1,1)
            yy= ym1(j,1,1,1)
            zz= zm1(j,1,1,1)
            z_kwave1 (  j) = z_tmp_kwave1
            z_kwave2 (  j) = z_tmp_kwave2
c     Incident wave
            z_rhs_inc(  j) = exp(ci*(z_alpha0(e)*xx
     $           -z_beta0(e)*(yy+1.0)))
c     Exact solution
            z_spotent(  j) = z_rhs_inc(j)-exp(ci*(z_alpha0(e)*xx
     $           +z_beta0(e)*(yy-1.0)))
         enddo

      enddo
 10   format(i5,4f13.5)

      call z2r_copy(rhs_inc(1),rhs_inc(n+1),z_rhs_inc,n)
      call cem_dtn_quasi_sol(rhs_inc(1),alp0,2)
      call r2z_copy(z_rhs_inc,rhs_inc(1),rhs_inc(n+1),n)

      call cem_grad(dxinc(  1),dyinc(  1),dzinc(  1),rhs_inc(  1))
      call cem_grad(dxinc(n+1),dyinc(n+1),dzinc(n+1),rhs_inc(n+1))
      call copy (rhs_nmn,dyinc,n2) ! assing neumman part boundary condition
c...  call chsign(rhs_nmn,n2)      ! n*(dxinc,dyinc,dzinc)
      call r2z_copy(z_rhs_nmn,rhs_nmn(1),rhs_nmn(n+1),n)

      call z_hmhDtN  ! return potent --> total field

      call cem_dtn_quasi_sol(potent(1),alp0,1)
      call cem_dtn_quasi_sol(rhs_inc(1),alp0,1)

      call r2z_copy(z_potent,potent(1),potent(n+1),n)

      call sub3(scaten(1,2),potent(  1),rhs_inc(  1),n) ! scattered field
      call sub3(scathn(1,2),potent(n+1),rhs_inc(n+1),n)

      call cem_acoustic_test2(energy_err,flag,real(z_beta0(nelt)))

      call copy(en(1,1),potent (  1),n)   ! numeric total field real
      call copy(hn(1,1),potent (n+1),n)   ! numeric total field imag
      call copy(en(1,2),scaten (1,2),n)   ! numeric scattered real
      call copy(hn(1,2),scathn (1,2),n)   ! numeric scattered real

      call z2r_copy(spotent(1),spotent(n+1),z_spotent,n)

      call copy(en(1,3),spotent(  1),n)   ! exact total field real
      call copy(hn(1,3),spotent(n+1),n) ! exact total field imag

      call cem_out

      call sub3(epotent(  1),potent(  1),spotent(  1),n)
      call sub3(epotent(n+1),potent(n+1),spotent(n+1),n)

      smax1  = glmax (scaten (1,2),n)
      smax2  = glmax (scathn (1,2),n)
      smin1  = glmin (scaten (1,2),n)
      smin2  = glmin (scathn (1,2),n)

      pmax1  = glmax (potent (  1),n)
      pmax2  = glmax (potent (n+1),n)
      pmin1  = glmin (potent (  1),n)
      pmin2  = glmin (potent (n+1),n)

      errmax1= glamax(epotent(  1),n)
      errmax2= glamax(epotent(n+1),n)

      if (nid.eq.0) write(6,20)  smax1  ,smin1
      if (nid.eq.0) write(6,30)  smax2  ,smin2
      if (nid.eq.0) write(6,40)  pmax1  ,pmin1
      if (nid.eq.0) write(6,50)  pmax2  ,pmin2
      if (nid.eq.0) write(6,60)  errmax1,errmax2,nx1-1,nelt,nelgt,np

 20   format(' val_sct    :: real max/min=',2e25.15)
 30   format(' val_sct    :: imag max/min=',2e25.15)
 40   format(' val_tot    :: real max/min=',2e25.15)
 50   format(' val_tot    :: imag max/min=',2e25.15)
 60   format(' val_err_tot::    real/imag:',2e25.15,4i8)

      if (errmax1.gt.5.0e-11) then
         write(*,*) 'ERROR: error in the real part is too large'
         call exitt(1)
      elseif (errmax2.gt.5.0e-11) then
         write(*,*) 'ERROR: error in the imaginary part is too large'
         call exitt(1)
      endif

      call exitt(0)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

c     npts=nx1*ny1*nz1*nelt

      do i = 1,npts
         xx= xm1(i,1,1,1)
         yy= ym1(i,1,1,1)
         zz= zm1(i,1,1,1)
         myshx(i,1,1,1)  =-pi*sin(pi*xx)*cos(pi*yy)
         myshy(i,1,1,1)  =-pi*cos(pi*xx)*sin(pi*yy)
         myshz(i,1,1,1)  = 0
         mysex(i,1,1,1)  =-pi*sin(pi*xx)*cos(pi*yy)
         mysey(i,1,1,1)  =-pi*cos(pi*xx)*sin(pi*yy)
         mysez(i,1,1,1)  = 0
      enddo


      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srchx(lpts),srchy(lpts),srchz(lpts)
      real srcex(lpts),srcey(lpts),srcez(lpts)

      return
      end
c-----------------------------------------------------------------------
      subroutine userfsrc(tt,srcfhx,srcfhy,srcfhz,srcfex,srcfey,srcfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srcfhx(lxzfl),srcfhy(lxzfl),srcfhz(lxzfl)
      real srcfex(lxzfl),srcfey(lxzfl),srcfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,iel)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

c     These don't do anything! This is a temporary measure until
c
c     https://github.com/NekCEM/NekCEM/issues/12
c
c     is resolved.
      integer ix,iy,iz,iel

      integer i

      do i = 1,npts
         permittivity(i) = 1.0
         permeability(i) = 1.0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      integer  e

      n    = nx1*ny1*nz1*nelv

c     ifxyo= .true.

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

c     if (nid.eq.0) write(6,*) wavenumber,' This is wavenumber'

      sx = 2.0*pi/(xmax-xmin)
      sy = 1.0/(ymax-ymin)

      if (if3d) sz = 2.0/(zmax-zmin)
      nmscale = 2.0/(xmax-xmin)   ! nanoscale

      if (if3d) then

         do i=1,n
            xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)-1.0
            ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)-1.0
            zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)-1.0
         enddo

      else
         do i=1,n
            xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)
            ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)
         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userft
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      implicit none

      return
      end
c-----------------------------------------------------------------------
